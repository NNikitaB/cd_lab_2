#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#define N 50000
#define M 1000

typedef int* arr ;
typedef double secbc;
typedef time_t sec;


secbc sort_inc(arr a,int n);
secbc sort_choice(arr a,int n);
secbc sort_swap(arr a,int n);
secbc sort_swap_1(arr a,int n);
secbc sort_swap_2(arr a,int n);
secbc sort_shell(arr a,int n);
secbc sort_choir(arr a,int n);
secbc sort_pyramid(arr a,int n);
void qqsort(arr a,int l,int r);

void output(arr a,int n){ if(a!=NULL )for(int i=0;i<n;++i)printf("%i :",a[i]);printf("\n");}
void del_arr(arr a)
{
    free(a);
}

void swap(arr i,arr j)
{
    int tmp;tmp =*i;*i=*j;*j=tmp;

}

arr create_arr_null(int n)
{
    arr a=(arr)calloc(sizeof(int),n);
    return a;
}
arr create_arr_up(int n)
{
    arr a=(arr)calloc(sizeof(int),n);
    for(int i=0;i<n;++i) a[i]=i;
    return a;
}

arr create_arr_down(int n)
{
    arr a=(arr)calloc(sizeof(int),n);
    for(int i=0,j=n;i<n;++i,--j) a[i]=j;
    return a;
}

arr create_arr_rand(int n)
{
    arr a=(arr)calloc(sizeof(int),n);
    for(int i=0;i<n;++i) a[i]=rand();
    return a;
}


secbc sort_inc(arr a,int n)
{
    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;
    for(int i=1;i<n;++i)
    {
        int tmp = a[i],j=i-1;
        while(j>=0 && tmp<a[j])
            {
                a[j+1]=a[j];
                --j;
            }

        a[j+1]=tmp;
    }
    time_2=clock()/CLOCKS_PER_SEC;

    return difftime(time_2,time_1);
}


secbc sort_choice(arr a,int n)
{
    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;


    for(int i=0;i<n-1;++i)
    {
        int tmp = a[i],index=i;
        for (int j=i+1;j<n;++j)
            if(tmp>a[j])tmp=a[j],index=j;
        a[index]=a[i];
        a[i]=tmp;

    }
    time_2=clock()/CLOCKS_PER_SEC;


    return difftime(time_2,time_1);
}

secbc sort_swap(arr a,int n)
{
    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;


    for(int i=0;i<n-1;++i)
    {
        for (int j=0;j<n-i-1;++j)
            if(a[j]>a[j+1]) //{int tmp =a[j];a[j]=a[j+1];a[j+1]=tmp;} //
                swap(&a[j],&a[j+1]);
    }
    time_2=clock()/CLOCKS_PER_SEC;


    return difftime(time_2,time_1);
}

secbc sort_swap_1(arr a,int n)
{
    int p;
    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;


    for(int i=0;i<n;++i)
    {
        p=0;
        for (int j=i;j<n;++j)
            if(a[i]>a[j])  swap(a+i,a+j),++p;
        if(p==0) break;
    }
    time_2=clock()/CLOCKS_PER_SEC;


    return difftime(time_2,time_1);
}

secbc sort_swap_2(arr a,int n)
{
    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;

    int i=0;
    do
    {

        int p=n;
        for (int j=n-1;i<j;--j)
            if(a[j-1]>=a[j])  swap(a+j,a+j-1),p=j-1;
      i=p;
    }while(i<n);
    time_2=clock()/CLOCKS_PER_SEC;


    return difftime(time_2,time_1);
}



secbc sort_shell(arr a,int n)
{
    arr h=create_arr_null(M);

    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;
    int t = (log((double)n)/log((double)3))-1,k,hh,i;
    if (t < 1){t=1;h[t-1] = 1;}
    else h[t] = 1;


for (k=t; k >= 0; k--)
     h[k-1] = 3*h[k]+1;


for (int s=t;s>=0;s--)
    {
        hh = h[s];
        for (int j = hh;j<n;j++)
           {
               i = j-hh;
               k = a[j];
               while ((k <= a[i])&&(i >= 0))
               {
                  a[i+hh] = a[i];
                  i = i-hh;
               }
               a[i+hh] = k;
           }
     }
  time_2=clock()/CLOCKS_PER_SEC;

  del_arr(h);

  return difftime(time_2,time_1);
}


void qqsort(arr a,int l,int r)

{
	int x=a[l],i=l,j=r;//1 элемент в качестве разделителя
	while(i<=j)
	{
		while(a[i]<x) i++;
		while(a[j]>x)j--;
		if(i<=j){swap(a+i,a+j);i++;j--;}
	}
	if(l<j) qqsort(a,l,j);
	if(i<r)qqsort(a,i,r);

	}

secbc sort_choir(arr a,int n)
{
    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;

    qqsort(a,0,n-1);

    time_2=clock()/CLOCKS_PER_SEC;


    return difftime(time_2,time_1);
}



void sift(arr a,int left,int right)
{
    int i=left,j=(left*2)+1,tmp=a[left];//j=2*+1
    if((j<right)&& (a[j]<a[j+1]))++j;
    while((j<=right) && (tmp<a[j]))
    {
        swap(a+i,a+j);
        i=j;
        j=(j*2)+1;
        if((j<right)&& (a[j]<a[j+1]))++j;
    }
}
secbc sort_pyramid(arr a,int n)
{
    sec time_1=0,time_2=0;
    time_1=clock()/CLOCKS_PER_SEC;

    int left=n/2, right=n-1;
    while(left>0)sift(a,--left,right);
    while(right>0){ swap(a,a+right); sift(a,left,--right); }


    time_2=clock()/CLOCKS_PER_SEC;


    return  difftime(time_2,time_1);
}
int main()
{ arr a,b,c,d,e,f,g,h;
double i1,i2,i3,i4,i5,i6,i7,i8;
 a=create_arr_up(N);
  i1=sort_inc(a,N);
  b=create_arr_up(N);
  i2=sort_choice(b,N);
  c=create_arr_up(N);
  i3=sort_swap(c,N);
  d=create_arr_up(N);
  i4=sort_swap_1(d,N);
  e=create_arr_up(N);
  i5=sort_swap_2(e,N);
  f=create_arr_up(N);
  i6=sort_shell(f,N);
  g=create_arr_up(N);
  i7=sort_choir(g,N);
  h=create_arr_up(N);
 i8= sort_pyramid(h,N);

//output(a,N);output(b,N);output(c,N);output(d,N);output(e,N);output(f,N);output(g,N);output(h,N);
del_arr(a);del_arr(b);del_arr(c);del_arr(d);del_arr(e);del_arr(f);del_arr(g);del_arr(h);
printf("%f :%f :%f :%f :%f :%f :%f  :%f\n\n",i1,i2,i3,i4,i5,i6,i7,i8);

 a=create_arr_down(N);
  i1=sort_inc(a,N);
  b=create_arr_down(N);
  i2=sort_choice(b,N);
  c=create_arr_down(N);
  i3=sort_swap(c,N);
  d=create_arr_down(N);
  i4=sort_swap_1(d,N);
  e=create_arr_down(N);
 i5=sort_swap_2(e,N);
  f=create_arr_down(N);
  i6=sort_shell(f,N);
  g=create_arr_down(N);
  i7=sort_choir(g,N);
  h=create_arr_down(N);
 i8= sort_pyramid(h,N);

//output(a,N);output(b,N);output(c,N);output(d,N);output(e,N);output(f,N);output(g,N);output(h,N);
del_arr(a);del_arr(b);del_arr(c);del_arr(d);del_arr(e);del_arr(f);del_arr(g);del_arr(h);
printf("%f :%f :%f :%f :%f :%f :%f  :%f\n\n",i1,i2,i3,i4,i5,i6,i7,i8);

 a=create_arr_rand(N);
  i1=sort_inc(a,N);
  b=create_arr_rand(N);
  i2=sort_choice(b,N);
  c=create_arr_rand(N);
  i3=sort_swap(c,N);
  d=create_arr_rand(N);
  i4=sort_swap_1(d,N);
  e=create_arr_rand(N);
 i5=sort_swap_2(e,N);
  f=create_arr_rand(N);
  i6=sort_shell(f,N);
  g=create_arr_rand(N);
 i7=sort_choir(g,N);
  h=create_arr_rand(N);
 i8= sort_pyramid(h,N);

//output(a,N);output(b,N);output(c,N);output(d,N);output(e,N);output(f,N);output(g,N);output(h,N);
del_arr(a);del_arr(b);del_arr(c);del_arr(d);del_arr(e);del_arr(f);del_arr(g);del_arr(h);
printf("%f :%f :%f :%f :%f :%f :%f  :%f\n\n",i1,i2,i3,i4,i5,i6,i7,i8);

}
